[{"author":null,"categories":["Algorithm"],"content":"力扣 42. 接雨水","date":1656201600,"description":"力扣 42. 接雨水","dir":"post/algorithm/","excerpt_html":"力扣 42. 接雨水","excerpt_text":"力扣 42. 接雨水","expirydate":-62135596800,"fuzzywordcount":600,"html":"力扣 42. 接雨水","keywords":null,"kind":"page","lang":"en","lastmod":1656201600,"objectID":"3cca9632c99f89881f50d8d6ffd18ffa","permalink":"https://zhouqian0.github.io/algorithm/leetcode/42/","publishdate":"2022-06-26T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/42/","section":"post","summary":"接雨水 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。 方案一：垂直方向每一竖计算能接住的雨水量（前","tags":["leetcode","stack","preSum"],"title":"接雨水","type":"post","url":"/algorithm/leetcode/42/","weight":0,"wordcount":588},{"author":null,"categories":["Algorithm"],"content":"力扣 84. 柱状图中最大的矩形","date":1656201600,"description":"力扣 84. 柱状图中最大的矩形","dir":"post/algorithm/","excerpt_html":"力扣 84. 柱状图中最大的矩形","excerpt_text":"力扣 84. 柱状图中最大的矩形","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 84. 柱状图中最大的矩形","keywords":null,"kind":"page","lang":"en","lastmod":1656201600,"objectID":"269851a1ffc72fc457c5226766a08702","permalink":"https://zhouqian0.github.io/algorithm/leetcode/84/","publishdate":"2022-06-26T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/84/","section":"post","summary":"柱状图中最大的矩形 给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。 求在该柱状图中，能够勾勒出来的矩形的最大面","tags":["leetcode","stack"],"title":"柱状图中最大的矩形","type":"post","url":"/algorithm/leetcode/84/","weight":0,"wordcount":390},{"author":null,"categories":["Algorithm"],"content":"力扣 239. 滑动窗口最大值","date":1656201600,"description":"力扣 239. 滑动窗口最大值","dir":"post/algorithm/","excerpt_html":"力扣 239. 滑动窗口最大值","excerpt_text":"力扣 239. 滑动窗口最大值","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 239. 滑动窗口最大值","keywords":null,"kind":"page","lang":"en","lastmod":1656201600,"objectID":"edd7c7aa471579cc732d0e1fd4797712","permalink":"https://zhouqian0.github.io/algorithm/leetcode/239/","publishdate":"2022-06-26T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/239/","section":"post","summary":"滑动窗口最大值 给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。 你只可以看到在滑动窗口内的 k 个数字。滑动窗","tags":["leetcode","deque","queue"],"title":"滑动窗口最大值","type":"post","url":"/algorithm/leetcode/239/","weight":0,"wordcount":343},{"author":null,"categories":["Algorithm"],"content":"力扣 224. 基本计算器","date":1656028800,"description":"力扣 224. 基本计算器","dir":"post/algorithm/","excerpt_html":"力扣 224. 基本计算器","excerpt_text":"力扣 224. 基本计算器","expirydate":-62135596800,"fuzzywordcount":1100,"html":"力扣 224. 基本计算器","keywords":null,"kind":"page","lang":"en","lastmod":1656028800,"objectID":"32b8eaaddf5e9e44a16e5498790a9b7b","permalink":"https://zhouqian0.github.io/algorithm/leetcode/224/","publishdate":"2022-06-24T00:00:00Z","readingtime":3,"relpermalink":"/algorithm/leetcode/224/","section":"post","summary":"基本计算器 给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。 注意:不允许使用任何将字符串作为数学表达式计算的内置函数，比如 eval()","tags":["leetcode","stack"],"title":"基本计算器","type":"post","url":"/algorithm/leetcode/224/","weight":0,"wordcount":1053},{"author":null,"categories":["Algorithm"],"content":"力扣 150. 逆波兰表达式求值","date":1656028800,"description":"力扣 150. 逆波兰表达式求值","dir":"post/algorithm/","excerpt_html":"力扣 150. 逆波兰表达式求值","excerpt_text":"力扣 150. 逆波兰表达式求值","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 150. 逆波兰表达式求值","keywords":null,"kind":"page","lang":"en","lastmod":1656028800,"objectID":"79c9de71076f951bf4593d12d18dc76c","permalink":"https://zhouqian0.github.io/algorithm/leetcode/150/","publishdate":"2022-06-24T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/150/","section":"post","summary":"逆波兰表达式求值 根据 逆波兰表示法，求表达式的值。 有效的算符包括 +、-、*、/。每个运算对象可以是整数，也可以是另一个逆波兰表达式。 注意两个整","tags":["leetcode","stack"],"title":"逆波兰表达式求值","type":"post","url":"/algorithm/leetcode/150/","weight":0,"wordcount":344},{"author":null,"categories":["Algorithm"],"content":"力扣 155. 最小栈","date":1655942400,"description":"力扣 155. 最小栈","dir":"post/algorithm/","excerpt_html":"力扣 155. 最小栈","excerpt_text":"力扣 155. 最小栈","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 155. 最小栈","keywords":null,"kind":"page","lang":"en","lastmod":1655942400,"objectID":"13c237f417d77eb2b00a0e1bf05912b0","permalink":"https://zhouqian0.github.io/algorithm/leetcode/155/","publishdate":"2022-06-23T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/155/","section":"post","summary":"最小栈 设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。 实现 MinStack 类: MinStack() 初始化堆栈对象。 void push(int val) 将元素val推入堆栈。 void pop() 删","tags":["leetcode","stack"],"title":"最小栈","type":"post","url":"/algorithm/leetcode/155/","weight":0,"wordcount":372},{"author":null,"categories":["Algorithm"],"content":"力扣 20. 有效的括号","date":1655942400,"description":"力扣 20. 有效的括号","dir":"post/algorithm/","excerpt_html":"力扣 20. 有效的括号","excerpt_text":"力扣 20. 有效的括号","expirydate":-62135596800,"fuzzywordcount":500,"html":"力扣 20. 有效的括号","keywords":null,"kind":"page","lang":"en","lastmod":1655942400,"objectID":"33912f64e4c9225bade67eed87ec2e0b","permalink":"https://zhouqian0.github.io/algorithm/leetcode/20/","publishdate":"2022-06-23T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/20/","section":"post","summary":"有效的括号 给定一个只包括 \u0026lsquo;(\u0026rsquo;，\u0026rsquo;)\u0026rsquo;，\u0026rsquo;{\u0026rsquo;，\u0026rsquo;}\u0026r","tags":["leetcode","stack"],"title":"有效的括号","type":"post","url":"/algorithm/leetcode/20/","weight":0,"wordcount":443},{"author":null,"categories":["Algorithm"],"content":"力扣 141. 环形链表","date":1655337600,"description":"力扣 141. 环形链表","dir":"post/algorithm/","excerpt_html":"力扣 141. 环形链表","excerpt_text":"力扣 141. 环形链表","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 141. 环形链表","keywords":null,"kind":"page","lang":"en","lastmod":1655337600,"objectID":"5b4a6a827e028a51efa310038dc9c992","permalink":"https://zhouqian0.github.io/algorithm/leetcode/141/","publishdate":"2022-06-16T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/141/","section":"post","summary":"环形链表 给你一个链表的头节点 head ，判断链表中是否有环。 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中","tags":["leetcode","linked list"],"title":"环形链表","type":"post","url":"/algorithm/leetcode/141/","weight":0,"wordcount":301},{"author":null,"categories":["Algorithm"],"content":"力扣 142. 环形链表 II","date":1655337600,"description":"力扣 142. 环形链表 II","dir":"post/algorithm/","excerpt_html":"力扣 142. 环形链表 II","excerpt_text":"力扣 142. 环形链表 II","expirydate":-62135596800,"fuzzywordcount":500,"html":"力扣 142. 环形链表 II","keywords":null,"kind":"page","lang":"en","lastmod":1655337600,"objectID":"ff73e4ae7062efc854b3126e6936b60b","permalink":"https://zhouqian0.github.io/algorithm/leetcode/142/","publishdate":"2022-06-16T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/142/","section":"post","summary":"环形链表 II 给定一个链表的头节点 head，返回链表开始入环的第一个节点。如果链表无环，则返回 null。 如果链表中有某个节点，可以通过连续跟踪 next","tags":["leetcode","linked list"],"title":"环形链表 II","type":"post","url":"/algorithm/leetcode/142/","weight":0,"wordcount":484},{"author":null,"categories":["Algorithm"],"content":"acwing 136. 邻值查找","date":1655337600,"description":"acwing 136. 邻值查找","dir":"post/algorithm/","excerpt_html":"acwing 136. 邻值查找","excerpt_text":"acwing 136. 邻值查找","expirydate":-62135596800,"fuzzywordcount":1000,"html":"acwing 136. 邻值查找","keywords":null,"kind":"page","lang":"en","lastmod":1655337600,"objectID":"b74116277a9f086e36501195738189c7","permalink":"https://zhouqian0.github.io/algorithm/acwing/136/","publishdate":"2022-06-16T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/acwing/136/","section":"post","summary":"邻值查找 给定一个长度为 n 的序列 A ，A 中的数各不相同。 对于 A 中的每一个数 Ai ，求： min1≤j\u0026lt;i|Ai−Aj| 以及令上式取到最小值的 j （","tags":["acwing","linked list","array"],"title":"邻值查找","type":"post","url":"/algorithm/acwing/136/","weight":0,"wordcount":904},{"author":null,"categories":["Algorithm"],"content":"力扣 25. K 个一组翻转链表","date":1655251200,"description":"力扣 25. K 个一组翻转链表","dir":"post/algorithm/","excerpt_html":"力扣 25. K 个一组翻转链表","excerpt_text":"力扣 25. K 个一组翻转链表","expirydate":-62135596800,"fuzzywordcount":600,"html":"力扣 25. K 个一组翻转链表","keywords":null,"kind":"page","lang":"en","lastmod":1655251200,"objectID":"b1ccabe3a8274fcc78979c09f9a77e85","permalink":"https://zhouqian0.github.io/algorithm/leetcode/25/","publishdate":"2022-06-15T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/25/","section":"post","summary":"K 个一组翻转链表 给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。 k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不","tags":["leetcode","linked list"],"title":"K 个一组翻转链表","type":"post","url":"/algorithm/leetcode/25/","weight":0,"wordcount":512},{"author":null,"categories":["Algorithm"],"content":"力扣 206. 反转链表","date":1655251200,"description":"力扣 206. 反转链表","dir":"post/algorithm/","excerpt_html":"力扣 206. 反转链表","excerpt_text":"力扣 206. 反转链表","expirydate":-62135596800,"fuzzywordcount":200,"html":"力扣 206. 反转链表","keywords":null,"kind":"page","lang":"en","lastmod":1655251200,"objectID":"e6f3aa691953d7114efba40bb8c9c4e3","permalink":"https://zhouqian0.github.io/algorithm/leetcode/206/","publishdate":"2022-06-15T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/206/","section":"post","summary":"反转链表 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。 方案一：通过过滤器将所有非零元素顺序前置 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode *","tags":["leetcode","linked list"],"title":"反转链表","type":"post","url":"/algorithm/leetcode/206/","weight":0,"wordcount":161},{"author":null,"categories":["Algorithm"],"content":"力扣 26. 删除有序数组中的重复项","date":1655078400,"description":"力扣 26. 删除有序数组中的重复项","dir":"post/algorithm/","excerpt_html":"力扣 26. 删除有序数组中的重复项","excerpt_text":"力扣 26. 删除有序数组中的重复项","expirydate":-62135596800,"fuzzywordcount":300,"html":"力扣 26. 删除有序数组中的重复项","keywords":null,"kind":"page","lang":"en","lastmod":1655078400,"objectID":"b310f47f33359fd8c3fa24b9c35205b4","permalink":"https://zhouqian0.github.io/algorithm/leetcode/26/","publishdate":"2022-06-13T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/26/","section":"post","summary":"删除有序数组中的重复项 给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该","tags":["leetcode","array"],"title":"删除有序数组中的重复项","type":"post","url":"/algorithm/leetcode/26/","weight":0,"wordcount":271},{"author":null,"categories":["Algorithm"],"content":"力扣 88. 合并两个有序数组","date":1655078400,"description":"力扣 88. 合并两个有序数组","dir":"post/algorithm/","excerpt_html":"力扣 88. 合并两个有序数组","excerpt_text":"力扣 88. 合并两个有序数组","expirydate":-62135596800,"fuzzywordcount":600,"html":"力扣 88. 合并两个有序数组","keywords":null,"kind":"page","lang":"en","lastmod":1655078400,"objectID":"ab055ae3415bd7e2b1d1172a0f4ab3b4","permalink":"https://zhouqian0.github.io/algorithm/leetcode/88/","publishdate":"2022-06-13T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/88/","section":"post","summary":"合并两个有序数组 给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。 请你 合并 nums2 到 nums1 中，使合并后","tags":["leetcode","array"],"title":"合并两个有序数组","type":"post","url":"/algorithm/leetcode/88/","weight":0,"wordcount":548},{"author":null,"categories":["Algorithm"],"content":"力扣 283. 移动零","date":1655078400,"description":"力扣 283. 移动零","dir":"post/algorithm/","excerpt_html":"力扣 283. 移动零","excerpt_text":"力扣 283. 移动零","expirydate":-62135596800,"fuzzywordcount":300,"html":"力扣 283. 移动零","keywords":null,"kind":"page","lang":"en","lastmod":1655078400,"objectID":"1949ff5763e0cc0a573ca2c167d95095","permalink":"https://zhouqian0.github.io/algorithm/leetcode/283/","publishdate":"2022-06-13T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/283/","section":"post","summary":"移动零 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 请注意 ，必须在不复制数组的情况下原地对数组进行","tags":["leetcode","array"],"title":"移动零","type":"post","url":"/algorithm/leetcode/283/","weight":0,"wordcount":213},{"author":null,"categories":["Archive"],"content":"记录日常使用的和查找相关的 Linux 命令","date":1653436800,"description":"记录日常使用的和查找相关的 Linux 命令","dir":"post/archive/","excerpt_html":"记录日常使用的和查找相关的 Linux 命令","excerpt_text":"记录日常使用的和查找相关的 Linux 命令","expirydate":-62135596800,"fuzzywordcount":1300,"html":"记录日常使用的和查找相关的 Linux 命令","keywords":null,"kind":"page","lang":"en","lastmod":1653436800,"objectID":"8203d3a890170a81a051a5d2b63dea9e","permalink":"https://zhouqian0.github.io/2022/05/25/linux/find/","publishdate":"2022-05-25T00:00:00Z","readingtime":3,"relpermalink":"/2022/05/25/linux/find/","section":"post","summary":"介绍 find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。 如果使用该命令时，不设置任何参数，则 find 命令将在当前目录","tags":["Linux"],"title":"Linux 日常命令 — find","type":"post","url":"/2022/05/25/linux/find/","weight":0,"wordcount":1298},{"author":null,"categories":["Golang"],"content":"Go 工作环境简要介绍","date":1653436800,"description":"Go 工作环境简要介绍","dir":"post/golang/","excerpt_html":"Go 工作环境简要介绍","excerpt_text":"Go 工作环境简要介绍","expirydate":-62135596800,"fuzzywordcount":700,"html":"Go 工作环境简要介绍","keywords":null,"kind":"page","lang":"en","lastmod":1653436800,"objectID":"4753d8b951b11ade048425cd02e27e09","permalink":"https://zhouqian0.github.io/2022/05/25/install-source/","publishdate":"2022-05-25T00:00:00Z","readingtime":2,"relpermalink":"/2022/05/25/install-source/","section":"post","summary":"环境介绍 通过 docker image 创建的 container。 通过命令 docker run -it golang 启动容器。 容器使用 Go 版本：v1.18.2 linux/amd64 GOROOT GO 语言的安装路径。 GOPATH Go 的工作目录，值为","tags":["Golang"],"title":"工作区和GOPATH","type":"post","url":"/2022/05/25/install-source/","weight":0,"wordcount":687},{"author":null,"categories":["Archive"],"content":"记录日常使用的和查找相关的 Linux 命令","date":1652832000,"description":"记录日常使用的和查找相关的 Linux 命令","dir":"post/archive/","excerpt_html":"记录日常使用的和查找相关的 Linux 命令","excerpt_text":"记录日常使用的和查找相关的 Linux 命令","expirydate":-62135596800,"fuzzywordcount":1100,"html":"记录日常使用的和查找相关的 Linux 命令","keywords":null,"kind":"page","lang":"en","lastmod":1652832000,"objectID":"fa28c03c7e97e38c7fb806218113ea4b","permalink":"https://zhouqian0.github.io/2022/05/18/linux/df/","publishdate":"2022-05-18T00:00:00Z","readingtime":3,"relpermalink":"/2022/05/18/linux/df/","section":"post","summary":"介绍 df（disk free）：用于显示在 Linux 系统上的文件系统磁盘使用情况统计。 如果命令未指定目录，则默认展示当前被挂载的文件系统的可用空间（单","tags":["Linux"],"title":"Linux 日常命令 — df","type":"post","url":"/2022/05/18/linux/df/","weight":0,"wordcount":1054},{"author":null,"categories":["Archive"],"content":"记录日常使用的和查找相关的 Linux 命令","date":1652832000,"description":"记录日常使用的和查找相关的 Linux 命令","dir":"post/archive/","excerpt_html":"记录日常使用的和查找相关的 Linux 命令","excerpt_text":"记录日常使用的和查找相关的 Linux 命令","expirydate":-62135596800,"fuzzywordcount":900,"html":"记录日常使用的和查找相关的 Linux 命令","keywords":null,"kind":"page","lang":"en","lastmod":1652832000,"objectID":"06e2d6c466bf4af34598c50f9a42c533","permalink":"https://zhouqian0.github.io/2022/05/18/linux/du/","publishdate":"2022-05-18T00:00:00Z","readingtime":2,"relpermalink":"/2022/05/18/linux/du/","section":"post","summary":"介绍 du（disk usage）：用于显示指定的目录或文件所占用的磁盘空间。 如果命令未指定目录，则默认展示当前目录的文件磁盘使用情况（单位 kb","tags":["Linux"],"title":"Linux 日常命令 — du","type":"post","url":"/2022/05/18/linux/du/","weight":0,"wordcount":846},{"author":null,"categories":["Daily"],"content":"通过命令分析磁盘占用情况","date":1652832000,"description":"通过命令分析磁盘占用情况","dir":"post/daily/","excerpt_html":"通过命令分析磁盘占用情况","excerpt_text":"通过命令分析磁盘占用情况","expirydate":-62135596800,"fuzzywordcount":300,"html":"通过命令分析磁盘占用情况","keywords":null,"kind":"page","lang":"en","lastmod":1652832000,"objectID":"7c73519e90c08d07e024e1f7bac3b5c2","permalink":"https://zhouqian0.github.io/2022/05/18/disk/","publishdate":"2022-05-18T00:00:00Z","readingtime":1,"relpermalink":"/2022/05/18/disk/","section":"post","summary":"磁盘相关命令 df du 大文件占用查找思路 使用 df -Th 找到希望查找的目录中磁盘占用最大的目录。 [root@iZuf6cdrrzbsjtp7kwq6haZ ~]# df -Th Filesystem Type Size Used Avail Use% Mounted on devtmpfs devtmpfs 387M 0 387M 0% /dev tmpfs tmpfs 405M 0 405M 0% /dev/shm tmpfs tmpfs 405M","tags":["Daily","Linux"],"title":"Linux 磁盘占用分析","type":"post","url":"/2022/05/18/disk/","weight":0,"wordcount":294},{"author":null,"categories":["Golang"],"content":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","date":1652745600,"description":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","dir":"post/golang/","excerpt_html":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","excerpt_text":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","expirydate":-62135596800,"fuzzywordcount":1300,"html":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","keywords":null,"kind":"page","lang":"en","lastmod":1652745600,"objectID":"0d12ff0bfc09d29c1e3f00810337e0ca","permalink":"https://zhouqian0.github.io/2022/05/17/intro/","publishdate":"2022-05-17T00:00:00Z","readingtime":3,"relpermalink":"/2022/05/17/intro/","section":"post","summary":"Go 语言简介 Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。 Go 语言优势 可以用作构建快速、可靠、高效的规模化软件，","tags":["Golang"],"title":"Go 语言介绍","type":"post","url":"/2022/05/17/intro/","weight":0,"wordcount":1293},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://zhouqian0.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7a0da914bde98a7d3fcc7f6c5886633c","permalink":"https://zhouqian0.github.io/top/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/top/about/","section":"top","summary":"I was nobody, so there\u0026rsquo;s really no risk in losing anything.","tags":null,"title":"","type":"top","url":"/top/about/","weight":0,"wordcount":11},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"54ccacff97b96806d49760361ef17350","permalink":"https://zhouqian0.github.io/top/books/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/books/","section":"top","summary":"","tags":null,"title":"","type":"top","url":"/top/books/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"top/","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"104f9431647fd5dcb14e8d0947747fa9","permalink":"https://zhouqian0.github.io/top/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/archive/","section":"top","summary":"","tags":null,"title":"Posts Archive","type":"archive","url":"/top/archive/","weight":0,"wordcount":0}]
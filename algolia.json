[{"author":null,"categories":["Archive"],"content":"记录日常使用的和查找相关的 Linux 命令","date":1653436800,"description":"记录日常使用的和查找相关的 Linux 命令","dir":"post/archive/","excerpt_html":"记录日常使用的和查找相关的 Linux 命令","excerpt_text":"记录日常使用的和查找相关的 Linux 命令","expirydate":-62135596800,"fuzzywordcount":1300,"html":"记录日常使用的和查找相关的 Linux 命令","keywords":null,"kind":"page","lang":"en","lastmod":1653436800,"objectID":"8203d3a890170a81a051a5d2b63dea9e","permalink":"https://zhouqian0.github.io/2022/05/25/linux/find/","publishdate":"2022-05-25T00:00:00Z","readingtime":3,"relpermalink":"/2022/05/25/linux/find/","section":"post","summary":"介绍 find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。 如果使用该命令时，不设置任何参数，则 find 命令将在当前目录","tags":["Linux"],"title":"Linux 日常命令 — find","type":"post","url":"/2022/05/25/linux/find/","weight":0,"wordcount":1298},{"author":null,"categories":["Golang"],"content":"Go 工作环境简要介绍","date":1653436800,"description":"Go 工作环境简要介绍","dir":"post/golang/","excerpt_html":"Go 工作环境简要介绍","excerpt_text":"Go 工作环境简要介绍","expirydate":-62135596800,"fuzzywordcount":600,"html":"Go 工作环境简要介绍","keywords":null,"kind":"page","lang":"en","lastmod":1653436800,"objectID":"4753d8b951b11ade048425cd02e27e09","permalink":"https://zhouqian0.github.io/2022/05/25/install-source/","publishdate":"2022-05-25T00:00:00Z","readingtime":2,"relpermalink":"/2022/05/25/install-source/","section":"post","summary":"环境介绍 通过 docker image 创建的 container。 通过命令 docker run -it golang 启动容器。 容器使用 Go 版本：v1.18.2 linux/amd64 GOROOT GO 语言的安装路径。 GOPATH Go 的工作目录，值为","tags":["Golang"],"title":"工作区和GOPATH","type":"post","url":"/2022/05/25/install-source/","weight":0,"wordcount":574},{"author":null,"categories":["Archive"],"content":"记录日常使用的和查找相关的 Linux 命令","date":1652832000,"description":"记录日常使用的和查找相关的 Linux 命令","dir":"post/archive/","excerpt_html":"记录日常使用的和查找相关的 Linux 命令","excerpt_text":"记录日常使用的和查找相关的 Linux 命令","expirydate":-62135596800,"fuzzywordcount":1100,"html":"记录日常使用的和查找相关的 Linux 命令","keywords":null,"kind":"page","lang":"en","lastmod":1652832000,"objectID":"fa28c03c7e97e38c7fb806218113ea4b","permalink":"https://zhouqian0.github.io/2022/05/18/linux/df/","publishdate":"2022-05-18T00:00:00Z","readingtime":3,"relpermalink":"/2022/05/18/linux/df/","section":"post","summary":"介绍 df（disk free）：用于显示在 Linux 系统上的文件系统磁盘使用情况统计。 如果命令未指定目录，则默认展示当前被挂载的文件系统的可用空间（单","tags":["Linux"],"title":"Linux 日常命令 — df","type":"post","url":"/2022/05/18/linux/df/","weight":0,"wordcount":1054},{"author":null,"categories":["Archive"],"content":"记录日常使用的和查找相关的 Linux 命令","date":1652832000,"description":"记录日常使用的和查找相关的 Linux 命令","dir":"post/archive/","excerpt_html":"记录日常使用的和查找相关的 Linux 命令","excerpt_text":"记录日常使用的和查找相关的 Linux 命令","expirydate":-62135596800,"fuzzywordcount":900,"html":"记录日常使用的和查找相关的 Linux 命令","keywords":null,"kind":"page","lang":"en","lastmod":1652832000,"objectID":"06e2d6c466bf4af34598c50f9a42c533","permalink":"https://zhouqian0.github.io/2022/05/18/linux/du/","publishdate":"2022-05-18T00:00:00Z","readingtime":2,"relpermalink":"/2022/05/18/linux/du/","section":"post","summary":"介绍 du（disk usage）：用于显示指定的目录或文件所占用的磁盘空间。 如果命令未指定目录，则默认展示当前目录的文件磁盘使用情况（单位 kb","tags":["Linux"],"title":"Linux 日常命令 — du","type":"post","url":"/2022/05/18/linux/du/","weight":0,"wordcount":846},{"author":null,"categories":["Daily"],"content":"通过命令分析磁盘占用情况","date":1652832000,"description":"通过命令分析磁盘占用情况","dir":"post/daily/","excerpt_html":"通过命令分析磁盘占用情况","excerpt_text":"通过命令分析磁盘占用情况","expirydate":-62135596800,"fuzzywordcount":300,"html":"通过命令分析磁盘占用情况","keywords":null,"kind":"page","lang":"en","lastmod":1652832000,"objectID":"7c73519e90c08d07e024e1f7bac3b5c2","permalink":"https://zhouqian0.github.io/2022/05/18/disk/","publishdate":"2022-05-18T00:00:00Z","readingtime":1,"relpermalink":"/2022/05/18/disk/","section":"post","summary":"磁盘相关命令 df du 大文件占用查找思路 使用 df -Th 找到希望查找的目录中磁盘占用最大的目录。 [root@iZuf6cdrrzbsjtp7kwq6haZ ~]# df -Th Filesystem Type Size Used Avail Use% Mounted on devtmpfs devtmpfs 387M 0 387M 0% /dev tmpfs tmpfs 405M 0 405M 0% /dev/shm tmpfs tmpfs 405M","tags":["Daily","Linux"],"title":"Linux 磁盘占用分析","type":"post","url":"/2022/05/18/disk/","weight":0,"wordcount":294},{"author":null,"categories":["Golang"],"content":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","date":1652745600,"description":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","dir":"post/golang/","excerpt_html":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","excerpt_text":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","expirydate":-62135596800,"fuzzywordcount":1300,"html":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","keywords":null,"kind":"page","lang":"en","lastmod":1652745600,"objectID":"0d12ff0bfc09d29c1e3f00810337e0ca","permalink":"https://zhouqian0.github.io/2022/05/17/intro/","publishdate":"2022-05-17T00:00:00Z","readingtime":3,"relpermalink":"/2022/05/17/intro/","section":"post","summary":"Go 语言简介 Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。 Go 语言优势 可以用作构建快速、可靠、高效的规模化软件，","tags":["Golang"],"title":"Go 语言介绍","type":"post","url":"/2022/05/17/intro/","weight":0,"wordcount":1293},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://zhouqian0.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7a0da914bde98a7d3fcc7f6c5886633c","permalink":"https://zhouqian0.github.io/top/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/top/about/","section":"top","summary":"I was nobody, so there\u0026rsquo;s really no risk in losing anything.","tags":null,"title":"","type":"top","url":"/top/about/","weight":0,"wordcount":11},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"54ccacff97b96806d49760361ef17350","permalink":"https://zhouqian0.github.io/top/books/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/books/","section":"top","summary":"","tags":null,"title":"","type":"top","url":"/top/books/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"top/","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"104f9431647fd5dcb14e8d0947747fa9","permalink":"https://zhouqian0.github.io/top/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/archive/","section":"top","summary":"","tags":null,"title":"Posts Archive","type":"archive","url":"/top/archive/","weight":0,"wordcount":0}]
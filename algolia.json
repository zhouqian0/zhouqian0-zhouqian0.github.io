[{"author":null,"categories":["Algorithm"],"content":"二叉树的最大深度","date":1660003200,"description":"二叉树的最大深度","dir":"post/algorithm/","excerpt_html":"二叉树的最大深度","excerpt_text":"二叉树的最大深度","expirydate":-62135596800,"fuzzywordcount":600,"html":"二叉树的最大深度","keywords":null,"kind":"page","lang":"en","lastmod":1660003200,"objectID":"72b98c2c15809ab3c5587361d10edb92","permalink":"https://zhouqian0.github.io/algorithm/leetcode/104/","publishdate":"2022-08-09T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/104/","section":"post","summary":"力扣 104. 二叉树的最大深度 给定一个二叉树，找出其最大深度。 二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。 说明: 叶子节点是指没有子节点的","tags":["leetcode","recursion"],"title":"二叉树的最大深度","type":"post","url":"/algorithm/leetcode/104/","weight":0,"wordcount":559},{"author":null,"categories":["Algorithm"],"content":"二叉树的最小深度","date":1660003200,"description":"二叉树的最小深度","dir":"post/algorithm/","excerpt_html":"二叉树的最小深度","excerpt_text":"二叉树的最小深度","expirydate":-62135596800,"fuzzywordcount":700,"html":"二叉树的最小深度","keywords":null,"kind":"page","lang":"en","lastmod":1660003200,"objectID":"ce589c1c3b8e058f972bc1c116fcb2d6","permalink":"https://zhouqian0.github.io/algorithm/leetcode/111/","publishdate":"2022-08-09T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/111/","section":"post","summary":"力扣 111. 二叉树的最小深度 给定一个二叉树，找出其最小深度。 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。 说明：叶子节点是指没有子节点的","tags":["leetcode","recursion"],"title":"二叉树的最小深度","type":"post","url":"/algorithm/leetcode/111/","weight":0,"wordcount":681},{"author":null,"categories":["Algorithm"],"content":"子集","date":1660003200,"description":"子集","dir":"post/algorithm/","excerpt_html":"子集","excerpt_text":"子集","expirydate":-62135596800,"fuzzywordcount":500,"html":"子集","keywords":null,"kind":"page","lang":"en","lastmod":1660003200,"objectID":"f37b80b2aa13ea5868778f7fe8b16fcf","permalink":"https://zhouqian0.github.io/algorithm/leetcode/78/","publishdate":"2022-08-09T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/78/","section":"post","summary":"力扣 78. 子集 给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。 解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。 方案","tags":["leetcode","recursion"],"title":"子集","type":"post","url":"/algorithm/leetcode/78/","weight":0,"wordcount":462},{"author":null,"categories":["Algorithm"],"content":"组合","date":1660003200,"description":"组合","dir":"post/algorithm/","excerpt_html":"组合","excerpt_text":"组合","expirydate":-62135596800,"fuzzywordcount":400,"html":"组合","keywords":null,"kind":"page","lang":"en","lastmod":1660003200,"objectID":"7718a49f436fbeb338bcb002a7ccc965","permalink":"https://zhouqian0.github.io/algorithm/leetcode/46/","publishdate":"2022-08-09T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/46/","section":"post","summary":"力扣 46. 组合 给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。 方案一：递归，遍历每一种可能。 func permute(nums []int) (ans [][]int) { n := len(nums) //","tags":["leetcode","recursion"],"title":"组合","type":"post","url":"/algorithm/leetcode/46/","weight":0,"wordcount":368},{"author":null,"categories":["Algorithm"],"content":"组合","date":1660003200,"description":"组合","dir":"post/algorithm/","excerpt_html":"组合","excerpt_text":"组合","expirydate":-62135596800,"fuzzywordcount":400,"html":"组合","keywords":null,"kind":"page","lang":"en","lastmod":1660003200,"objectID":"64dcadb67c4b409f66561390fb6444c0","permalink":"https://zhouqian0.github.io/algorithm/leetcode/77/","publishdate":"2022-08-09T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/77/","section":"post","summary":"力扣 77. 组合 给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。 你可以按 任何顺序 返回答案。 方案一：递归，遍历每一种可能。 func combine(n int, k int) (ans [][]int) {","tags":["leetcode","recursion"],"title":"组合","type":"post","url":"/algorithm/leetcode/77/","weight":0,"wordcount":372},{"author":null,"categories":["Algorithm"],"content":"翻转二叉树","date":1660003200,"description":"翻转二叉树","dir":"post/algorithm/","excerpt_html":"翻转二叉树","excerpt_text":"翻转二叉树","expirydate":-62135596800,"fuzzywordcount":300,"html":"翻转二叉树","keywords":null,"kind":"page","lang":"en","lastmod":1660003200,"objectID":"47c77fa8151e72670511b31155539ce0","permalink":"https://zhouqian0.github.io/algorithm/leetcode/226/","publishdate":"2022-08-09T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/226/","section":"post","summary":"力扣 226. 翻转二叉树 给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。 方案一：递归，遍历每一种可能。 /** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left","tags":["leetcode","recursion"],"title":"翻转二叉树","type":"post","url":"/algorithm/leetcode/226/","weight":0,"wordcount":246},{"author":null,"categories":["Algorithm"],"content":"验证二叉搜索树","date":1660003200,"description":"验证二叉搜索树","dir":"post/algorithm/","excerpt_html":"验证二叉搜索树","excerpt_text":"验证二叉搜索树","expirydate":-62135596800,"fuzzywordcount":400,"html":"验证二叉搜索树","keywords":null,"kind":"page","lang":"en","lastmod":1660003200,"objectID":"34677f822c983190fa282a81fc722c13","permalink":"https://zhouqian0.github.io/algorithm/leetcode/98/","publishdate":"2022-08-09T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/98/","section":"post","summary":"力扣 98. 验证二叉搜索树 给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。 方案一：递归，遍历每一种可能。 /** * Definition for a binary tree node. * type TreeNode struct { * Val int","tags":["leetcode","recursion"],"title":"验证二叉搜索树","type":"post","url":"/algorithm/leetcode/98/","weight":0,"wordcount":357},{"author":null,"categories":["Algorithm"],"content":"力扣 15. 三数之和","date":1658793600,"description":"力扣 15. 三数之和","dir":"post/algorithm/","excerpt_html":"力扣 15. 三数之和","excerpt_text":"力扣 15. 三数之和","expirydate":-62135596800,"fuzzywordcount":500,"html":"力扣 15. 三数之和","keywords":null,"kind":"page","lang":"en","lastmod":1658793600,"objectID":"ee1d48a2b130bd814b5a003301b00796","permalink":"https://zhouqian0.github.io/algorithm/leetcode/15/","publishdate":"2022-07-26T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/15/","section":"post","summary":"力扣 15. 三数之和 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组","tags":["leetcode","two pointers"],"title":"三数之和","type":"post","url":"/algorithm/leetcode/15/","weight":0,"wordcount":430},{"author":null,"categories":["Algorithm"],"content":"力扣 1074. 元素和为目标值的子矩阵数量","date":1658793600,"description":"力扣 1074. 元素和为目标值的子矩阵数量","dir":"post/algorithm/","excerpt_html":"力扣 1074. 元素和为目标值的子矩阵数量","excerpt_text":"力扣 1074. 元素和为目标值的子矩阵数量","expirydate":-62135596800,"fuzzywordcount":600,"html":"力扣 1074. 元素和为目标值的子矩阵数量","keywords":null,"kind":"page","lang":"en","lastmod":1658793600,"objectID":"5e3aaa6992841578adc90db31b6e5022","permalink":"https://zhouqian0.github.io/algorithm/leetcode/1074/","publishdate":"2022-07-26T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/1074/","section":"post","summary":"力扣 1074. 元素和为目标值的子矩阵数量 给出矩阵 matrix 和目标值 target，返回元素总和等于目标值的非空子矩阵的数量。 子矩阵 x1, y1, x2, y2 是满足 x1 \u0026lt;= x \u0026lt;= x2 且 y1","tags":["leetcode","presum"],"title":"元素和为目标值的子矩阵数量","type":"post","url":"/algorithm/leetcode/1074/","weight":0,"wordcount":505},{"author":null,"categories":["Algorithm"],"content":"力扣 560. 和为 K 的子数组","date":1658793600,"description":"力扣 560. 和为 K 的子数组","dir":"post/algorithm/","excerpt_html":"力扣 560. 和为 K 的子数组","excerpt_text":"力扣 560. 和为 K 的子数组","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 560. 和为 K 的子数组","keywords":null,"kind":"page","lang":"en","lastmod":1658793600,"objectID":"94357cffca2f5930625eaede53e80f15","permalink":"https://zhouqian0.github.io/algorithm/leetcode/560/","publishdate":"2022-07-26T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/560/","section":"post","summary":"力扣 560. 和为 K 的子数组 给你一个整数数组 nums 和一个整数 k ，请你统计并返回 该数组中和为 k 的连续子数组的个数 。 方案一：套用优美子数组 中前缀和的方案。 func","tags":["leetcode","presum"],"title":"和为 K 的子数组","type":"post","url":"/algorithm/leetcode/560/","weight":0,"wordcount":317},{"author":null,"categories":["Algorithm"],"content":"力扣 811. 子域名访问计数","date":1658793600,"description":"力扣 811. 子域名访问计数","dir":"post/algorithm/","excerpt_html":"力扣 811. 子域名访问计数","excerpt_text":"力扣 811. 子域名访问计数","expirydate":-62135596800,"fuzzywordcount":600,"html":"力扣 811. 子域名访问计数","keywords":null,"kind":"page","lang":"en","lastmod":1658793600,"objectID":"4c3a503d6441c69df4247f7ed411366e","permalink":"https://zhouqian0.github.io/algorithm/leetcode/811/","publishdate":"2022-07-26T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/811/","section":"post","summary":"力扣 811. 子域名访问计数 网站域名 \u0026ldquo;discuss.leetcode.com\u0026rdquo; 由多个子域名组成。顶级域名为 \u0026ldquo;com\u0026rdquo; ，二级域名为 \u0026ldquo;leetcode.com\u0026rdquo; ，最低一级为 \u0026ldquo;discuss.leetcode.com\u0026rdquo; 。当访问域名 \u0026ldquo;discuss.leetcode.com\u0026rdquo; 时，同时也会隐式访问其父域名 \u0026ldquo;leetcode.com\u0026rdquo; 以及 \u0026ldquo;com\u0026rdquo; 。","tags":["leetcode","map"],"title":"子域名访问计数","type":"post","url":"/algorithm/leetcode/811/","weight":0,"wordcount":501},{"author":null,"categories":["Algorithm"],"content":"力扣 697. 数组的度","date":1658793600,"description":"力扣 697. 数组的度","dir":"post/algorithm/","excerpt_html":"力扣 697. 数组的度","excerpt_text":"力扣 697. 数组的度","expirydate":-62135596800,"fuzzywordcount":500,"html":"力扣 697. 数组的度","keywords":null,"kind":"page","lang":"en","lastmod":1658793600,"objectID":"159dedca0b5c0d9299562513c057c8a2","permalink":"https://zhouqian0.github.io/algorithm/leetcode/697/","publishdate":"2022-07-26T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/697/","section":"post","summary":"力扣 697. 数组的度 给定一个非空且只包含非负数的整数数组 nums，数组的 度 的定义是指数组里任一元素出现频数的最大值。 你的任务是在 nums 中找到与 nums 拥有相","tags":["leetcode","map"],"title":"数组的度","type":"post","url":"/algorithm/leetcode/697/","weight":0,"wordcount":465},{"author":null,"categories":["Algorithm"],"content":"力扣 11. 盛最多水的容器","date":1658793600,"description":"力扣 11. 盛最多水的容器","dir":"post/algorithm/","excerpt_html":"力扣 11. 盛最多水的容器","excerpt_text":"力扣 11. 盛最多水的容器","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 11. 盛最多水的容器","keywords":null,"kind":"page","lang":"en","lastmod":1658793600,"objectID":"1bf627149cf2b1e9247a2c423121b045","permalink":"https://zhouqian0.github.io/algorithm/leetcode/11/","publishdate":"2022-07-26T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/11/","section":"post","summary":"力扣 11. 盛最多水的容器 给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。 找出其中的两条线，使得它们与 x 轴共同构成的容器","tags":["leetcode","two pointers"],"title":"盛最多水的容器","type":"post","url":"/algorithm/leetcode/11/","weight":0,"wordcount":381},{"author":null,"categories":["Algorithm"],"content":"力扣 167. 两数之和 II - 输入有序数组","date":1658707200,"description":"力扣 167. 两数之和 II - 输入有序数组","dir":"post/algorithm/","excerpt_html":"力扣 167. 两数之和 II - 输入有序数组","excerpt_text":"力扣 167. 两数之和 II - 输入有序数组","expirydate":-62135596800,"fuzzywordcount":500,"html":"力扣 167. 两数之和 II - 输入有序数组","keywords":null,"kind":"page","lang":"en","lastmod":1658707200,"objectID":"d6b009243fabe20a02a19e7382ad8f54","permalink":"https://zhouqian0.github.io/algorithm/leetcode/167/","publishdate":"2022-07-25T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/167/","section":"post","summary":"力扣 167. 两数之和 II - 输入有序数组 给你一个下标从 1 开始的整数数组 numbers ，该数组已按 非递减顺序排列 ，请你从数组中找出满足相加之和等于目标数 target 的两个数。","tags":["leetcode","two pointers"],"title":"两数之和 II - 输入有序数组","type":"post","url":"/algorithm/leetcode/167/","weight":0,"wordcount":424},{"author":null,"categories":["Algorithm"],"content":"力扣 53. 最大子数组和","date":1658707200,"description":"力扣 53. 最大子数组和","dir":"post/algorithm/","excerpt_html":"力扣 53. 最大子数组和","excerpt_text":"力扣 53. 最大子数组和","expirydate":-62135596800,"fuzzywordcount":500,"html":"力扣 53. 最大子数组和","keywords":null,"kind":"page","lang":"en","lastmod":1658707200,"objectID":"efbef5b7bdcef0a4af13389401635bc8","permalink":"https://zhouqian0.github.io/algorithm/leetcode/53/","publishdate":"2022-07-25T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/53/","section":"post","summary":"力扣 1109. 最大子数组和 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 子数组 是数组中的一个连续部","tags":["leetcode","presum"],"title":"最大子数组和","type":"post","url":"/algorithm/leetcode/53/","weight":0,"wordcount":413},{"author":null,"categories":["Algorithm"],"content":"力扣 1109. 航班预订统计","date":1658707200,"description":"力扣 1109. 航班预订统计","dir":"post/algorithm/","excerpt_html":"力扣 1109. 航班预订统计","excerpt_text":"力扣 1109. 航班预订统计","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 1109. 航班预订统计","keywords":null,"kind":"page","lang":"en","lastmod":1658707200,"objectID":"ca6d94550857aed3b198e68c761e7ca9","permalink":"https://zhouqian0.github.io/algorithm/leetcode/1109/","publishdate":"2022-07-25T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/1109/","section":"post","summary":"力扣 1109. 航班预订统计 这里有 n 个航班，它们分别从 1 到 n 进行编号。 有一份航班预订表 bookings ，表中第 i 条预订记录 bookings[i] = [firsti, lasti, seatsi] 意味着在从 firsti 到 lasti （包含 firsti 和 lasti ）的","tags":["leetcode","difference","presum"],"title":"航班预订统计","type":"post","url":"/algorithm/leetcode/1109/","weight":0,"wordcount":398},{"author":null,"categories":["Algorithm"],"content":"力扣 304. 二维区域和检索 - 矩阵不可变","date":1658620800,"description":"力扣 304. 二维区域和检索 - 矩阵不可变","dir":"post/algorithm/","excerpt_html":"力扣 304. 二维区域和检索 - 矩阵不可变","excerpt_text":"力扣 304. 二维区域和检索 - 矩阵不可变","expirydate":-62135596800,"fuzzywordcount":600,"html":"力扣 304. 二维区域和检索 - 矩阵不可变","keywords":null,"kind":"page","lang":"en","lastmod":1658620800,"objectID":"79dd943be64e262408fd7d147e24fd85","permalink":"https://zhouqian0.github.io/algorithm/leetcode/304/","publishdate":"2022-07-24T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/304/","section":"post","summary":"力扣 304. 二维区域和检索 - 矩阵不可变 给定一个二维矩阵 matrix，以下类型的多个请求： 计算其子矩形范围内元素的总和，该子矩阵的 左上角 为 (row1, col1) ，右下","tags":["leetcode","presum"],"title":"二维区域和检索 - 矩阵不可变","type":"post","url":"/algorithm/leetcode/304/","weight":0,"wordcount":500},{"author":null,"categories":["Algorithm"],"content":"力扣 1248. 统计「优美子数组」","date":1658620800,"description":"力扣 1248. 统计「优美子数组」","dir":"post/algorithm/","excerpt_html":"力扣 1248. 统计「优美子数组」","excerpt_text":"力扣 1248. 统计「优美子数组」","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 1248. 统计「优美子数组」","keywords":null,"kind":"page","lang":"en","lastmod":1658620800,"objectID":"a0635c89dc7799ce0631fbab00aa50dd","permalink":"https://zhouqian0.github.io/algorithm/leetcode/1248/","publishdate":"2022-07-24T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/1248/","section":"post","summary":"力扣 1248. 统计「优美子数组」 给你一个整数数组 nums 和一个整数 k。如果某个连续子数组中恰好有 k 个奇数数字，我们就认为这个子数组是「优美子数组」。 请返回","tags":["leetcode","presum"],"title":"统计「优美子数组」","type":"post","url":"/algorithm/leetcode/1248/","weight":0,"wordcount":313},{"author":null,"categories":["Algorithm"],"content":"力扣 146. LRU 缓存","date":1657065600,"description":"力扣 146. LRU 缓存","dir":"post/algorithm/","excerpt_html":"力扣 146. LRU 缓存","excerpt_text":"力扣 146. LRU 缓存","expirydate":-62135596800,"fuzzywordcount":600,"html":"力扣 146. LRU 缓存","keywords":null,"kind":"page","lang":"en","lastmod":1657065600,"objectID":"7f9ebb7854f317b740423733394c3540","permalink":"https://zhouqian0.github.io/algorithm/leetcode/146/","publishdate":"2022-07-06T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/146/","section":"post","summary":"力扣 146. LRU 缓存 请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。 实现 LRUCache 类： LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存 int get(int key) 如果关键字 key 存在于","tags":["leetcode","map","linked list"],"title":"LRU 缓存","type":"post","url":"/algorithm/leetcode/146/","weight":0,"wordcount":534},{"author":null,"categories":["Algorithm"],"content":"力扣 1. 两数之和","date":1657065600,"description":"力扣 1. 两数之和","dir":"post/algorithm/","excerpt_html":"力扣 1. 两数之和","excerpt_text":"力扣 1. 两数之和","expirydate":-62135596800,"fuzzywordcount":700,"html":"力扣 1. 两数之和","keywords":null,"kind":"page","lang":"en","lastmod":1657065600,"objectID":"c0187fea09911f3821e392329b6fa8a9","permalink":"https://zhouqian0.github.io/algorithm/leetcode/1/","publishdate":"2022-07-06T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/1/","section":"post","summary":"力扣 1. 两数之和 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那两个整数，并返回它们的数组下标。 你可以假设每","tags":["leetcode","map","two pointers"],"title":"两数之和","type":"post","url":"/algorithm/leetcode/1/","weight":0,"wordcount":629},{"author":null,"categories":["Algorithm"],"content":"力扣 30. 串联所有单词的子串","date":1657065600,"description":"力扣 30. 串联所有单词的子串","dir":"post/algorithm/","excerpt_html":"力扣 30. 串联所有单词的子串","excerpt_text":"力扣 30. 串联所有单词的子串","expirydate":-62135596800,"fuzzywordcount":600,"html":"力扣 30. 串联所有单词的子串","keywords":null,"kind":"page","lang":"en","lastmod":1657065600,"objectID":"85fffff1c9872f7dc1979f2fed7192d1","permalink":"https://zhouqian0.github.io/algorithm/leetcode/30/","publishdate":"2022-07-06T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/30/","section":"post","summary":"力扣 30. 串联所有单词的子串 给定一个字符串 s 和一些 长度相同 的单词 words 。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。 注意子串要与 words 中的单","tags":["leetcode","map"],"title":"串联所有单词的子串","type":"post","url":"/algorithm/leetcode/30/","weight":0,"wordcount":536},{"author":null,"categories":["Algorithm"],"content":"力扣 49. 字母异位词分组","date":1657065600,"description":"力扣 49. 字母异位词分组","dir":"post/algorithm/","excerpt_html":"力扣 49. 字母异位词分组","excerpt_text":"力扣 49. 字母异位词分组","expirydate":-62135596800,"fuzzywordcount":700,"html":"力扣 49. 字母异位词分组","keywords":null,"kind":"page","lang":"en","lastmod":1657065600,"objectID":"a3aec6227d7c24634ec3cc228ee17d70","permalink":"https://zhouqian0.github.io/algorithm/leetcode/49/","publishdate":"2022-07-06T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/49/","section":"post","summary":"力扣 49. 字母异位词分组 给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。 字母异位词 是由重新排列源单词的字母得到的一个","tags":["leetcode","map"],"title":"字母异位词分组","type":"post","url":"/algorithm/leetcode/49/","weight":0,"wordcount":619},{"author":null,"categories":["Algorithm"],"content":"力扣 874. 模拟行走机器人","date":1657065600,"description":"力扣 874. 模拟行走机器人","dir":"post/algorithm/","excerpt_html":"力扣 874. 模拟行走机器人","excerpt_text":"力扣 874. 模拟行走机器人","expirydate":-62135596800,"fuzzywordcount":800,"html":"力扣 874. 模拟行走机器人","keywords":null,"kind":"page","lang":"en","lastmod":1657065600,"objectID":"d083db91c8a249993de7e4c9950960eb","permalink":"https://zhouqian0.github.io/algorithm/leetcode/874/","publishdate":"2022-07-06T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/874/","section":"post","summary":"力扣 874. 模拟行走机器人 机器人在一个无限大小的 XY 网格平面上行走，从点 (0, 0) 处开始出发，面向北方。该机器人可以接收以下三种类型的命令 commands ： -2 ：向左转 90","tags":["leetcode","map"],"title":"模拟行走机器人","type":"post","url":"/algorithm/leetcode/874/","weight":0,"wordcount":778},{"author":null,"categories":["Algorithm"],"content":"力扣 85. 最大矩形","date":1656892800,"description":"力扣 85. 最大矩形","dir":"post/algorithm/","excerpt_html":"力扣 85. 最大矩形","excerpt_text":"力扣 85. 最大矩形","expirydate":-62135596800,"fuzzywordcount":800,"html":"力扣 85. 最大矩形","keywords":null,"kind":"page","lang":"en","lastmod":1656892800,"objectID":"cdaf9e6d9216a2f5bbddeae316265990","permalink":"https://zhouqian0.github.io/algorithm/leetcode/85/","publishdate":"2022-07-04T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/85/","section":"post","summary":"力扣 85. 最大矩形 给定一个仅包含 0 和 1 、大小为 rows x cols 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。 方案一：类比力扣 84题，将矩阵压缩成","tags":["leetcode","stack"],"title":"最大矩形","type":"post","url":"/algorithm/leetcode/85/","weight":0,"wordcount":704},{"author":null,"categories":["Algorithm"],"content":"力扣 66. 加一","date":1656633600,"description":"力扣 66. 加一","dir":"post/algorithm/","excerpt_html":"力扣 66. 加一","excerpt_text":"力扣 66. 加一","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 66. 加一","keywords":null,"kind":"page","lang":"en","lastmod":1656633600,"objectID":"7c93b76a83509d801fbe9216f690740b","permalink":"https://zhouqian0.github.io/algorithm/leetcode/66/","publishdate":"2022-07-01T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/66/","section":"post","summary":"力扣 66. 加一 给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。 你可以","tags":["leetcode","array"],"title":"加一","type":"post","url":"/algorithm/leetcode/66/","weight":0,"wordcount":303},{"author":null,"categories":["Algorithm"],"content":"力扣 21. 合并两个有序链表","date":1656633600,"description":"力扣 21. 合并两个有序链表","dir":"post/algorithm/","excerpt_html":"力扣 21. 合并两个有序链表","excerpt_text":"力扣 21. 合并两个有序链表","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 21. 合并两个有序链表","keywords":null,"kind":"page","lang":"en","lastmod":1656633600,"objectID":"906409847144fe219e6d47a89f0ae481","permalink":"https://zhouqian0.github.io/algorithm/leetcode/21/","publishdate":"2022-07-01T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/21/","section":"post","summary":"力扣 21. 合并两个有序链表 将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 方案一：遍历双链表，通过过","tags":["leetcode","linked list"],"title":"合并两个有序链表","type":"post","url":"/algorithm/leetcode/21/","weight":0,"wordcount":394},{"author":null,"categories":["Algorithm"],"content":"力扣 641. 设计循环双端队列","date":1656633600,"description":"力扣 641. 设计循环双端队列","dir":"post/algorithm/","excerpt_html":"力扣 641. 设计循环双端队列","excerpt_text":"力扣 641. 设计循环双端队列","expirydate":-62135596800,"fuzzywordcount":1000,"html":"力扣 641. 设计循环双端队列","keywords":null,"kind":"page","lang":"en","lastmod":1656633600,"objectID":"4b05c2dd7889396c89a119ff246f80cb","permalink":"https://zhouqian0.github.io/algorithm/leetcode/641/","publishdate":"2022-07-01T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/641/","section":"post","summary":"力扣 641. 设计循环双端队列 设计实现双端队列。 实现 MyCircularDeque 类: MyCircularDeque(int k)：构造函数,双端队列最大为 k。 boolean insertFront()：将一个元素添加到双端队列","tags":["leetcode","deque","array","linked list"],"title":"设计循环双端队列","type":"post","url":"/algorithm/leetcode/641/","weight":0,"wordcount":999},{"author":null,"categories":["Algorithm"],"content":"力扣 42. 接雨水","date":1656201600,"description":"力扣 42. 接雨水","dir":"post/algorithm/","excerpt_html":"力扣 42. 接雨水","excerpt_text":"力扣 42. 接雨水","expirydate":-62135596800,"fuzzywordcount":900,"html":"力扣 42. 接雨水","keywords":null,"kind":"page","lang":"en","lastmod":1656201600,"objectID":"3cca9632c99f89881f50d8d6ffd18ffa","permalink":"https://zhouqian0.github.io/algorithm/leetcode/42/","publishdate":"2022-06-26T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/42/","section":"post","summary":"力扣 42. 接雨水 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。 方案一：垂直方向每一竖计算能接住的雨水","tags":["leetcode","stack","preSum"],"title":"接雨水","type":"post","url":"/algorithm/leetcode/42/","weight":0,"wordcount":810},{"author":null,"categories":["Algorithm"],"content":"力扣 84. 柱状图中最大的矩形","date":1656201600,"description":"力扣 84. 柱状图中最大的矩形","dir":"post/algorithm/","excerpt_html":"力扣 84. 柱状图中最大的矩形","excerpt_text":"力扣 84. 柱状图中最大的矩形","expirydate":-62135596800,"fuzzywordcount":800,"html":"力扣 84. 柱状图中最大的矩形","keywords":null,"kind":"page","lang":"en","lastmod":1656201600,"objectID":"269851a1ffc72fc457c5226766a08702","permalink":"https://zhouqian0.github.io/algorithm/leetcode/84/","publishdate":"2022-06-26T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/84/","section":"post","summary":"力扣 84. 柱状图中最大的矩形 给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。 求在该柱状图中，能够勾勒出来的矩形的","tags":["leetcode","stack"],"title":"柱状图中最大的矩形","type":"post","url":"/algorithm/leetcode/84/","weight":0,"wordcount":743},{"author":null,"categories":["Algorithm"],"content":"力扣 239. 滑动窗口最大值","date":1656201600,"description":"力扣 239. 滑动窗口最大值","dir":"post/algorithm/","excerpt_html":"力扣 239. 滑动窗口最大值","excerpt_text":"力扣 239. 滑动窗口最大值","expirydate":-62135596800,"fuzzywordcount":500,"html":"力扣 239. 滑动窗口最大值","keywords":null,"kind":"page","lang":"en","lastmod":1656201600,"objectID":"edd7c7aa471579cc732d0e1fd4797712","permalink":"https://zhouqian0.github.io/algorithm/leetcode/239/","publishdate":"2022-06-26T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/239/","section":"post","summary":"力扣 239. 滑动窗口最大值 给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。 你只可以看到在滑动窗口内的 k 个数字。","tags":["leetcode","deque","queue"],"title":"滑动窗口最大值","type":"post","url":"/algorithm/leetcode/239/","weight":0,"wordcount":463},{"author":null,"categories":["Algorithm"],"content":"力扣 224. 基本计算器","date":1656028800,"description":"力扣 224. 基本计算器","dir":"post/algorithm/","excerpt_html":"力扣 224. 基本计算器","excerpt_text":"力扣 224. 基本计算器","expirydate":-62135596800,"fuzzywordcount":1200,"html":"力扣 224. 基本计算器","keywords":null,"kind":"page","lang":"en","lastmod":1656028800,"objectID":"32b8eaaddf5e9e44a16e5498790a9b7b","permalink":"https://zhouqian0.github.io/algorithm/leetcode/224/","publishdate":"2022-06-24T00:00:00Z","readingtime":3,"relpermalink":"/algorithm/leetcode/224/","section":"post","summary":"力扣 224. 基本计算器 给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。 注意:不允许使用任何将字符串作为数学表达式计算的内置函数，","tags":["leetcode","stack"],"title":"基本计算器","type":"post","url":"/algorithm/leetcode/224/","weight":0,"wordcount":1178},{"author":null,"categories":["Algorithm"],"content":"力扣 150. 逆波兰表达式求值","date":1656028800,"description":"力扣 150. 逆波兰表达式求值","dir":"post/algorithm/","excerpt_html":"力扣 150. 逆波兰表达式求值","excerpt_text":"力扣 150. 逆波兰表达式求值","expirydate":-62135596800,"fuzzywordcount":500,"html":"力扣 150. 逆波兰表达式求值","keywords":null,"kind":"page","lang":"en","lastmod":1656028800,"objectID":"79c9de71076f951bf4593d12d18dc76c","permalink":"https://zhouqian0.github.io/algorithm/leetcode/150/","publishdate":"2022-06-24T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/150/","section":"post","summary":"力扣 150. 逆波兰表达式求值 根据 逆波兰表示法，求表达式的值。 有效的算符包括 +、-、*、/。每个运算对象可以是整数，也可以是另一个逆波兰表达式。 注意","tags":["leetcode","stack"],"title":"逆波兰表达式求值","type":"post","url":"/algorithm/leetcode/150/","weight":0,"wordcount":429},{"author":null,"categories":["Algorithm"],"content":"力扣 155. 最小栈","date":1655942400,"description":"力扣 155. 最小栈","dir":"post/algorithm/","excerpt_html":"力扣 155. 最小栈","excerpt_text":"力扣 155. 最小栈","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 155. 最小栈","keywords":null,"kind":"page","lang":"en","lastmod":1655942400,"objectID":"13c237f417d77eb2b00a0e1bf05912b0","permalink":"https://zhouqian0.github.io/algorithm/leetcode/155/","publishdate":"2022-06-23T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/155/","section":"post","summary":"力扣 155. 最小栈 设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。 实现 MinStack 类: MinStack() 初始化堆栈对象。 void push(int val) 将元素val推入堆栈。","tags":["leetcode","stack"],"title":"最小栈","type":"post","url":"/algorithm/leetcode/155/","weight":0,"wordcount":375},{"author":null,"categories":["Algorithm"],"content":"力扣 20. 有效的括号","date":1655942400,"description":"力扣 20. 有效的括号","dir":"post/algorithm/","excerpt_html":"力扣 20. 有效的括号","excerpt_text":"力扣 20. 有效的括号","expirydate":-62135596800,"fuzzywordcount":600,"html":"力扣 20. 有效的括号","keywords":null,"kind":"page","lang":"en","lastmod":1655942400,"objectID":"33912f64e4c9225bade67eed87ec2e0b","permalink":"https://zhouqian0.github.io/algorithm/leetcode/20/","publishdate":"2022-06-23T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/20/","section":"post","summary":"力扣 20. 有效的括号 给定一个只包括 \u0026lsquo;(\u0026rsquo;，\u0026rsquo;)\u0026rsquo;，\u0026rsquo;{\u0026rsquo;，\u0026rsquo;","tags":["leetcode","stack"],"title":"有效的括号","type":"post","url":"/algorithm/leetcode/20/","weight":0,"wordcount":531},{"author":null,"categories":["Algorithm"],"content":"力扣 141. 环形链表","date":1655337600,"description":"力扣 141. 环形链表","dir":"post/algorithm/","excerpt_html":"力扣 141. 环形链表","excerpt_text":"力扣 141. 环形链表","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 141. 环形链表","keywords":null,"kind":"page","lang":"en","lastmod":1655337600,"objectID":"5b4a6a827e028a51efa310038dc9c992","permalink":"https://zhouqian0.github.io/algorithm/leetcode/141/","publishdate":"2022-06-16T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/141/","section":"post","summary":"力扣 141. 环形链表 给你一个链表的头节点 head ，判断链表中是否有环。 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定","tags":["leetcode","linked list"],"title":"环形链表","type":"post","url":"/algorithm/leetcode/141/","weight":0,"wordcount":392},{"author":null,"categories":["Algorithm"],"content":"力扣 142. 环形链表 II","date":1655337600,"description":"力扣 142. 环形链表 II","dir":"post/algorithm/","excerpt_html":"力扣 142. 环形链表 II","excerpt_text":"力扣 142. 环形链表 II","expirydate":-62135596800,"fuzzywordcount":700,"html":"力扣 142. 环形链表 II","keywords":null,"kind":"page","lang":"en","lastmod":1655337600,"objectID":"ff73e4ae7062efc854b3126e6936b60b","permalink":"https://zhouqian0.github.io/algorithm/leetcode/142/","publishdate":"2022-06-16T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/142/","section":"post","summary":"力扣 142. 环形链表 II 给定一个链表的头节点 head，返回链表开始入环的第一个节点。如果链表无环，则返回 null。 如果链表中有某个节点，可以通过连续","tags":["leetcode","linked list"],"title":"环形链表 II","type":"post","url":"/algorithm/leetcode/142/","weight":0,"wordcount":600},{"author":null,"categories":["Algorithm"],"content":"acwing 136. 邻值查找","date":1655337600,"description":"acwing 136. 邻值查找","dir":"post/algorithm/","excerpt_html":"acwing 136. 邻值查找","excerpt_text":"acwing 136. 邻值查找","expirydate":-62135596800,"fuzzywordcount":1100,"html":"acwing 136. 邻值查找","keywords":null,"kind":"page","lang":"en","lastmod":1655337600,"objectID":"b74116277a9f086e36501195738189c7","permalink":"https://zhouqian0.github.io/algorithm/acwing/136/","publishdate":"2022-06-16T00:00:00Z","readingtime":3,"relpermalink":"/algorithm/acwing/136/","section":"post","summary":"acwing 136. 邻值查找 给定一个长度为 n 的序列 A ，A 中的数各不相同。 对于 A 中的每一个数 Ai ，求： min1≤j\u0026lt;i|Ai−Aj| 以及令上式取到最小值的","tags":["acwing","linked list","array"],"title":"邻值查找","type":"post","url":"/algorithm/acwing/136/","weight":0,"wordcount":1048},{"author":null,"categories":["Algorithm"],"content":"力扣 25. K 个一组翻转链表","date":1655251200,"description":"力扣 25. K 个一组翻转链表","dir":"post/algorithm/","excerpt_html":"力扣 25. K 个一组翻转链表","excerpt_text":"力扣 25. K 个一组翻转链表","expirydate":-62135596800,"fuzzywordcount":700,"html":"力扣 25. K 个一组翻转链表","keywords":null,"kind":"page","lang":"en","lastmod":1655251200,"objectID":"b1ccabe3a8274fcc78979c09f9a77e85","permalink":"https://zhouqian0.github.io/algorithm/leetcode/25/","publishdate":"2022-06-15T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/25/","section":"post","summary":"力扣 25. K 个一组翻转链表 给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。 k 是一个正整数，它的值小于或等于链表的长度。如果节点","tags":["leetcode","linked list"],"title":"K 个一组翻转链表","type":"post","url":"/algorithm/leetcode/25/","weight":0,"wordcount":643},{"author":null,"categories":["Algorithm"],"content":"力扣 206. 反转链表","date":1655251200,"description":"力扣 206. 反转链表","dir":"post/algorithm/","excerpt_html":"力扣 206. 反转链表","excerpt_text":"力扣 206. 反转链表","expirydate":-62135596800,"fuzzywordcount":300,"html":"力扣 206. 反转链表","keywords":null,"kind":"page","lang":"en","lastmod":1655251200,"objectID":"e6f3aa691953d7114efba40bb8c9c4e3","permalink":"https://zhouqian0.github.io/algorithm/leetcode/206/","publishdate":"2022-06-15T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/206/","section":"post","summary":"力扣 206. 反转链表 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。 方案一：通过过滤器将所有非零元素顺序前置。 /** * Definition for singly-linked list. * type ListNode struct { * Val int","tags":["leetcode","linked list"],"title":"反转链表","type":"post","url":"/algorithm/leetcode/206/","weight":0,"wordcount":251},{"author":null,"categories":["Algorithm"],"content":"力扣 26. 删除有序数组中的重复项","date":1655078400,"description":"力扣 26. 删除有序数组中的重复项","dir":"post/algorithm/","excerpt_html":"力扣 26. 删除有序数组中的重复项","excerpt_text":"力扣 26. 删除有序数组中的重复项","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 26. 删除有序数组中的重复项","keywords":null,"kind":"page","lang":"en","lastmod":1655078400,"objectID":"b310f47f33359fd8c3fa24b9c35205b4","permalink":"https://zhouqian0.github.io/algorithm/leetcode/26/","publishdate":"2022-06-13T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/26/","section":"post","summary":"力扣 26. 删除有序数组中的重复项 给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺","tags":["leetcode","array"],"title":"删除有序数组中的重复项","type":"post","url":"/algorithm/leetcode/26/","weight":0,"wordcount":362},{"author":null,"categories":["Algorithm"],"content":"力扣 88. 合并两个有序数组","date":1655078400,"description":"力扣 88. 合并两个有序数组","dir":"post/algorithm/","excerpt_html":"力扣 88. 合并两个有序数组","excerpt_text":"力扣 88. 合并两个有序数组","expirydate":-62135596800,"fuzzywordcount":800,"html":"力扣 88. 合并两个有序数组","keywords":null,"kind":"page","lang":"en","lastmod":1655078400,"objectID":"ab055ae3415bd7e2b1d1172a0f4ab3b4","permalink":"https://zhouqian0.github.io/algorithm/leetcode/88/","publishdate":"2022-06-13T00:00:00Z","readingtime":2,"relpermalink":"/algorithm/leetcode/88/","section":"post","summary":"力扣 88. 合并两个有序数组 给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。 请你 合并 nums2 到 nums1 中，使","tags":["leetcode","array"],"title":"合并两个有序数组","type":"post","url":"/algorithm/leetcode/88/","weight":0,"wordcount":791},{"author":null,"categories":["Algorithm"],"content":"力扣 283. 移动零","date":1655078400,"description":"力扣 283. 移动零","dir":"post/algorithm/","excerpt_html":"力扣 283. 移动零","excerpt_text":"力扣 283. 移动零","expirydate":-62135596800,"fuzzywordcount":400,"html":"力扣 283. 移动零","keywords":null,"kind":"page","lang":"en","lastmod":1655078400,"objectID":"1949ff5763e0cc0a573ca2c167d95095","permalink":"https://zhouqian0.github.io/algorithm/leetcode/283/","publishdate":"2022-06-13T00:00:00Z","readingtime":1,"relpermalink":"/algorithm/leetcode/283/","section":"post","summary":"力扣 283. 移动零 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 请注意 ，必须在不复制数组的情况下原地对数","tags":["leetcode","array"],"title":"移动零","type":"post","url":"/algorithm/leetcode/283/","weight":0,"wordcount":309},{"author":null,"categories":["Archive"],"content":"记录日常使用的和查找相关的 Linux 命令","date":1653436800,"description":"记录日常使用的和查找相关的 Linux 命令","dir":"post/archive/","excerpt_html":"记录日常使用的和查找相关的 Linux 命令","excerpt_text":"记录日常使用的和查找相关的 Linux 命令","expirydate":-62135596800,"fuzzywordcount":1300,"html":"记录日常使用的和查找相关的 Linux 命令","keywords":null,"kind":"page","lang":"en","lastmod":1653436800,"objectID":"8203d3a890170a81a051a5d2b63dea9e","permalink":"https://zhouqian0.github.io/2022/05/25/linux/find/","publishdate":"2022-05-25T00:00:00Z","readingtime":3,"relpermalink":"/2022/05/25/linux/find/","section":"post","summary":"介绍 find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。 如果使用该命令时，不设置任何参数，则 find 命令将在当前目录","tags":["Linux"],"title":"Linux 日常命令 — find","type":"post","url":"/2022/05/25/linux/find/","weight":0,"wordcount":1298},{"author":null,"categories":["Golang"],"content":"Go 工作环境简要介绍","date":1653436800,"description":"Go 工作环境简要介绍","dir":"post/golang/","excerpt_html":"Go 工作环境简要介绍","excerpt_text":"Go 工作环境简要介绍","expirydate":-62135596800,"fuzzywordcount":700,"html":"Go 工作环境简要介绍","keywords":null,"kind":"page","lang":"en","lastmod":1653436800,"objectID":"4753d8b951b11ade048425cd02e27e09","permalink":"https://zhouqian0.github.io/2022/05/25/install-source/","publishdate":"2022-05-25T00:00:00Z","readingtime":2,"relpermalink":"/2022/05/25/install-source/","section":"post","summary":"环境介绍 通过 docker image 创建的 container。 通过命令 docker run -it golang 启动容器。 容器使用 Go 版本：v1.18.2 linux/amd64 GOROOT GO 语言的安装路径。 GOPATH Go 的工作目录，值为","tags":["Golang"],"title":"工作区和GOPATH","type":"post","url":"/2022/05/25/install-source/","weight":0,"wordcount":687},{"author":null,"categories":["Archive"],"content":"记录日常使用的和查找相关的 Linux 命令","date":1652832000,"description":"记录日常使用的和查找相关的 Linux 命令","dir":"post/archive/","excerpt_html":"记录日常使用的和查找相关的 Linux 命令","excerpt_text":"记录日常使用的和查找相关的 Linux 命令","expirydate":-62135596800,"fuzzywordcount":1100,"html":"记录日常使用的和查找相关的 Linux 命令","keywords":null,"kind":"page","lang":"en","lastmod":1652832000,"objectID":"fa28c03c7e97e38c7fb806218113ea4b","permalink":"https://zhouqian0.github.io/2022/05/18/linux/df/","publishdate":"2022-05-18T00:00:00Z","readingtime":3,"relpermalink":"/2022/05/18/linux/df/","section":"post","summary":"介绍 df（disk free）：用于显示在 Linux 系统上的文件系统磁盘使用情况统计。 如果命令未指定目录，则默认展示当前被挂载的文件系统的可用空间（单","tags":["Linux"],"title":"Linux 日常命令 — df","type":"post","url":"/2022/05/18/linux/df/","weight":0,"wordcount":1054},{"author":null,"categories":["Archive"],"content":"记录日常使用的和查找相关的 Linux 命令","date":1652832000,"description":"记录日常使用的和查找相关的 Linux 命令","dir":"post/archive/","excerpt_html":"记录日常使用的和查找相关的 Linux 命令","excerpt_text":"记录日常使用的和查找相关的 Linux 命令","expirydate":-62135596800,"fuzzywordcount":900,"html":"记录日常使用的和查找相关的 Linux 命令","keywords":null,"kind":"page","lang":"en","lastmod":1652832000,"objectID":"06e2d6c466bf4af34598c50f9a42c533","permalink":"https://zhouqian0.github.io/2022/05/18/linux/du/","publishdate":"2022-05-18T00:00:00Z","readingtime":2,"relpermalink":"/2022/05/18/linux/du/","section":"post","summary":"介绍 du（disk usage）：用于显示指定的目录或文件所占用的磁盘空间。 如果命令未指定目录，则默认展示当前目录的文件磁盘使用情况（单位 kb","tags":["Linux"],"title":"Linux 日常命令 — du","type":"post","url":"/2022/05/18/linux/du/","weight":0,"wordcount":846},{"author":null,"categories":["Daily"],"content":"通过命令分析磁盘占用情况","date":1652832000,"description":"通过命令分析磁盘占用情况","dir":"post/daily/","excerpt_html":"通过命令分析磁盘占用情况","excerpt_text":"通过命令分析磁盘占用情况","expirydate":-62135596800,"fuzzywordcount":300,"html":"通过命令分析磁盘占用情况","keywords":null,"kind":"page","lang":"en","lastmod":1652832000,"objectID":"7c73519e90c08d07e024e1f7bac3b5c2","permalink":"https://zhouqian0.github.io/2022/05/18/disk/","publishdate":"2022-05-18T00:00:00Z","readingtime":1,"relpermalink":"/2022/05/18/disk/","section":"post","summary":"磁盘相关命令 df du 大文件占用查找思路 使用 df -Th 找到希望查找的目录中磁盘占用最大的目录。 [root@iZuf6cdrrzbsjtp7kwq6haZ ~]# df -Th Filesystem Type Size Used Avail Use% Mounted on devtmpfs devtmpfs 387M 0 387M 0% /dev tmpfs tmpfs 405M 0 405M 0% /dev/shm tmpfs tmpfs 405M","tags":["Daily","Linux"],"title":"Linux 磁盘占用分析","type":"post","url":"/2022/05/18/disk/","weight":0,"wordcount":294},{"author":null,"categories":["Golang"],"content":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","date":1652745600,"description":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","dir":"post/golang/","excerpt_html":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","excerpt_text":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","expirydate":-62135596800,"fuzzywordcount":1300,"html":"Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。","keywords":null,"kind":"page","lang":"en","lastmod":1652745600,"objectID":"0d12ff0bfc09d29c1e3f00810337e0ca","permalink":"https://zhouqian0.github.io/2022/05/17/intro/","publishdate":"2022-05-17T00:00:00Z","readingtime":3,"relpermalink":"/2022/05/17/intro/","section":"post","summary":"Go 语言简介 Go 语言是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。 Go 语言优势 可以用作构建快速、可靠、高效的规模化软件，","tags":["Golang"],"title":"Go 语言介绍","type":"post","url":"/2022/05/17/intro/","weight":0,"wordcount":1293},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://zhouqian0.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7a0da914bde98a7d3fcc7f6c5886633c","permalink":"https://zhouqian0.github.io/top/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/top/about/","section":"top","summary":"I was nobody, so there\u0026rsquo;s really no risk in losing anything.","tags":null,"title":"","type":"top","url":"/top/about/","weight":0,"wordcount":11},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"54ccacff97b96806d49760361ef17350","permalink":"https://zhouqian0.github.io/top/books/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/books/","section":"top","summary":"","tags":null,"title":"","type":"top","url":"/top/books/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"top/","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"104f9431647fd5dcb14e8d0947747fa9","permalink":"https://zhouqian0.github.io/top/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/archive/","section":"top","summary":"","tags":null,"title":"Posts Archive","type":"archive","url":"/top/archive/","weight":0,"wordcount":0}]